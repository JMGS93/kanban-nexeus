// src/screens/Login.jsx
// -------------------------------------------------------------
// ‚úÖ Este componente maneja el inicio de sesi√≥n de los usuarios 
// en el sistema DataFlow Manager utilizando Firebase Authentication.
// Permite ingresar email y contrase√±a, muestra errores espec√≠ficos
// y notifica al componente padre cuando el login es exitoso.
// -------------------------------------------------------------

import React, { useState } from "react";
import { auth } from "../firebase"; // configuraci√≥n Firebase (instancia de autenticaci√≥n)
import { signInWithEmailAndPassword } from "firebase/auth"; // m√©todo de login por email/contrase√±a
import logo from "../assets/nexeus.png"; // logo de la app

export default function Login({ onLogin = () => {} }) {
  // -----------------------------
  // üîπ Estados locales
  // -----------------------------
  const [email, setEmail] = useState("");        // almacena el correo ingresado
  const [password, setPassword] = useState("");  // almacena la contrase√±a ingresada
  const [error, setError] = useState("");        // mensajes de error para el usuario
  const [loading, setLoading] = useState(false); // muestra spinner o desactiva bot√≥n mientras procesa

  // --------------------------------------------------
  // üîπ handleSubmit()
  // Manejador del env√≠o del formulario de login.
  // Realiza la validaci√≥n, intenta iniciar sesi√≥n y 
  // maneja los errores m√°s comunes de Firebase.
  // --------------------------------------------------
  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError("");

    try {
      // üî∏ Validaci√≥n b√°sica antes de intentar login
      if (!email || !password) {
        setError("Email y contrase√±a son obligatorios.");
        return;
      }

      // üîπ Autenticaci√≥n con Firebase
      const userCredential = await signInWithEmailAndPassword(auth, email, password);

      // üîπ Si todo sale bien, se notifica al componente padre
      // (por ejemplo, App.jsx) que el usuario ha iniciado sesi√≥n.
      onLogin(userCredential.user);

    } catch (err) {
      console.error("Login error:", err);

      // üî∏ Manejo de errores m√°s comunes devueltos por Firebase
      switch (err.code) {
        case "auth/user-not-found":
          setError("No existe una cuenta con este correo.");
          break;
        case "auth/wrong-password":
          setError("Contrase√±a incorrecta. Intenta de nuevo.");
          break;
        case "auth/invalid-email":
          setError("Correo electr√≥nico inv√°lido.");
          break;
        case "auth/invalid-credential":
          setError("Las credenciales ingresadas no son v√°lidas. Verifica tu correo y contrase√±a.");
          break;
        default:
          setError("Error al iniciar sesi√≥n: " + (err.message || err));
      }
    } finally {
      // üî∏ Restablece el estado de carga independientemente del resultado
      setLoading(false);
    }
  };

  // --------------------------------------------------
  // üîπ Renderizado del formulario de inicio de sesi√≥n
  // --------------------------------------------------
  return (
    <div className="max-w-md mx-auto p-6 bg-white rounded shadow flex flex-col items-center">
      {/* Logo del sistema */}
      <img src={logo} alt="Logo DataFlow Manager" className="w-50 h-50 mb-4" />

      <h2 className="text-2xl font-bold mb-4">Iniciar sesi√≥n</h2>

      {/* Formulario controlado */}
      <form onSubmit={handleSubmit} className="flex flex-col gap-3 w-full">

        {/* Campo de correo */}
        <input
          type="email"
          placeholder="Email"
          value={email}
          onChange={(e) => setEmail(e.target.value)}
          className="p-2 border rounded"
          required
        />

        {/* Campo de contrase√±a */}
        <input
          type="password"
          placeholder="Contrase√±a"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
          className="p-2 border rounded"
          required
        />

        {/* Mensaje de error (si existe) */}
        {error && <p className="text-red-500">{error}</p>}

        {/* Bot√≥n de env√≠o */}
        <button
          type="submit"
          style={{ backgroundColor: "#ec729c" }}
          className="text-white p-2 rounded flex items-center justify-center"
          disabled={loading} // evita m√∫ltiples env√≠os
        >
          {/* Spinner de carga (solo visible cuando loading=true) */}
          {loading && <span className="button-spinner" />}

          <span className="ml-2">
            {loading ? "Iniciando..." : "Iniciar Sesi√≥n"}
          </span>
        </button>
      </form>
    </div>
  );
}
